                    Завдання 9:

        1 частина з ДЗ-9!
- На АРІ за посиланням http://owu.linkpc.net/carsAPI/v2/doc
  зробити аутентифікацію user, який вже існує з даними: username - user12_12, password - P@$$word1.
- на самостійне - Зареєструвати користувача (а далі теж саме - пройти аутентифікацію) і отримати всі машинки
  користувача.

                                План виконання:
  - завартажимо такі залежності: "axios", "react-router-dom", "react-hook-form".
  - HeaderComponent для відображення login page i cars page
  - FooterComponent для стандартного відображення сторінки.
  - FormComponent з input login i password; використовуємо useForm задамо їм дефолтне значення.
    З форми деструктуруємо handleSubmit, register. Та параметризуємо useForm під модель отримуваних даних.
    Реєструємо інпути через ...register. У handleSubmit впровадимо ф-цію authenticate/автентифікувати.
  - створимо authService, в якіє побудуємо метод authentication(formData)/авторизація,
    що приймає username i password.
    В authenticate створимо змінну isAuth - яка вказує на те чи залогінений.
  - Щоб слідкувати за isAuth використаємо useState + щоб мала глобальну видимість.
    Тип <boolean> значення false - не залогінений. У використанні буде isAuthState.
    Якщо user залогінений, то в setIsAuthState зміни на true.
  - В сервісі будуємо axiosInstance, будуємо authService, в якому є метод authentication:
    має бути response типу <IAuthDataModel>, який робить постовий запит, здійснює перевірку
    і в localStorage зберігаємо пару токенів.
  - побудуємо AuthPage i CarsPage і прописуємо їх в router.
  - В CarsPage useEffect з функцією carService.getCars()
  - в сервісах побудуємо ф-ціє carService getCars(), винесемо окремо headers через interceptors.
  - Побудуємо helper, який слідкуватиме і повертатиме за парою токенів з локалСторендж.
  - отримали аксес токен i згодом рефреш.
  - побудуємо ще 2 моделі даних: ICarPaginatedModel і ICarWithAuthMode
  - в authService доробляємо ф-цію refresh і впроваджеємо в carService
  - CarsComponent => useState i useEffect => map => CarComponent
  - додавання стилів.


  - Додамо компоненту-застереження (WarningComponent) для відображення попередження,
    коли користувач намагається перейти на сторінку "Cars" без аутентифікації.

    Крок 1: Створіть компоненту WarningComponent.

    Крок 2: Оновіть MainLayout для управління станом аутентифікації
    Ми додамо стан аутентифікації в MainLayout і будемо передавати його дочірнім компонентам.

    Крок 3: Використайте стан аутентифікації в CarsPage
    Ми перевіримо стан аутентифікації і відобразимо компоненту-застереження, якщо користувач не аутентифікований.

    Підсумуємо:
    MainLayout.tsx: Додає стан аутентифікації, який передається через Outlet до дочірніх компонентів.
    CarsPage.tsx: Використовує useOutletContext для отримання стану аутентифікації і відображає WarningComponent, якщо користувач не аутентифікований.
    FormComponent.tsx: Використовує useOutletContext для встановлення стану аутентифікації після успішного логіну.

    Це дозволить вам відображати попередження на сторінці "Cars", якщо користувач не пройшов аутентифікацію.